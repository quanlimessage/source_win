<?php
/*******************************************************************************
SQLite操作クラス
	★SQL文とファイルパスを設定するだけで自動的に実行→結果取得する

設定系メソッド一覧（コンストラクタで引数指定されている場合は設定不要）

	db_init()
		DBファイルが無い場合は新規で作成（既にある場合は何もしない）

	setFilepath("ファイルパス",["ファイル名"])
		DBへのファイルパス（ファイル名を含む絶対パス）を設定

	setCreateSQL("SQL文")
		DBファイルが無い場合に新規作成する場合のSQL文を設定


実行系メソッド一覧

	fetch("SQL文")
		select文のSQL文を発行したい時に使用するメソッド
	
	regist("単一 or 配列のSQL文")
		select文以外のSQL文を発行したい時に使用するメソッド


2005/5/25 Yossee
*******************************************************************************/
class sqliteOpe{


/////////////////////////////////////////////////////////////////////////////
// メンバ変数の設定
//
// $filepath：DBへのファイルパス（ファイル名を含む絶対パス）
// $create_sql：DBファイルが無い場合に新規作成する場合のSQL文
// $escape_flg：バックスラッシュ削除（デフォルトはTRUE）※fetchメソッドのみ
/////////////////////////////////////////////////////////////////////////////
var $filepath;
var $create_sql;
var $escape_flg;

/////////////////////////////////////////////////////////////////////////////
// コンストラクタ
//
//	sqliteOpe([$args1],[$args2],[$args3]);
//
//		$args1：DBへのファイルパス（ファイル名を含む絶対パス）
//		$args2：第一引数で指定されているファイルが無い場合に
//				新規作成する場合のSQL文
//		$args3：バックスラッシュ除去フラグ（デフォルトはTrue）
//
//		★後で継承などで柔軟に対応できるよう引数無しでもＯＫにしている
//		★引数が指定されていればDB初期化メソッド（db_init()）を実行する
/////////////////////////////////////////////////////////////////////////////
function sqliteOpe($fp="",$cs="",$e=true){

	// メンバ変数を設定（引数の有無で処理を分岐）
	$this->filepath = ($fp)?$fp:"";
	$this->create_sql = ($cs)?$cs:"";
	$this->escape_flg = $e;

	#-----------------------------------------------------------
	# DB初期化フラグがTrueで第1引数と第2引数が指定されていれば
	# 新規に指定のパスにDBを作成する
	#-----------------------------------------------------------
	if($fp && $cs)sqliteOpe::db_init();

}

/////////////////////////////////////////////////////////////////////////////
// DBファイルが無い場合は新規で作成（既にある場合は何もしない）するメソッド
//	db_init();	※戻り値：なし（失敗したら強制終了のため）
/////////////////////////////////////////////////////////////////////////////
function db_init(){

	// ファイルパスを新規作成用SQLが設定されていなかったら強制終了
	if(!$this->filepath || !$this->create_sql)die("未設定のデータがあるため、強制終了しました。<br>\n(ErrorNo:1)<br>\n");

	#------------------------------------------------------------------
	# 処理実行
	#------------------------------------------------------------------
	if($dbh = sqlite_open($this->filepath,0666,$sqlite_error_message)){
	
		if(file_exists($this->filepath) && !filesize($this->filepath)){

			if(!sqlite_query($dbh,$this->create_sql)){
				die("DB作成に失敗しました(ErrorNo:2)<br>\n".sqlite_error_string(sqlite_last_error($dbh))."<br>\n");
			}
			sqlite_close($dbh);
		}

	}		
	else{
	  die("DB接続に失敗しました<br>\n(ErrorNo:3)<br>\n".$sqlite_error_message."<br>\n");
	}

}

/////////////////////////////////////////////////////////////////////////////
// DBへのファイルパス（ファイル名を含む絶対パス）を設定するメソッド
//	※第2引数をオプションにしてディレクトリ名とファイル名を分割して指定可
//		setFilepath($path,[$file])	※戻り値：なし
/////////////////////////////////////////////////////////////////////////////
function setFilepath($path,$file=""){

	if(!$path):
		die("未設定の引数があるため、強制終了しました。<br>\n(ErrorNo:4)<br>\n");
	else:
		$this->filepath = $path.$file;
	endif;

}

/////////////////////////////////////////////////////////////////////////////
// DBファイルが無い場合に新規作成する場合のSQL文を設定するメソッド
//		setCreateSQL($sql)	※戻り値：なし
/////////////////////////////////////////////////////////////////////////////
function setCreateSQL($sql){

	if(!$sql):
		die("未設定の引数があるため、強制終了しました。<br>\n(ErrorNo:5)<br>\n");
	else:
		$this->create_sql = $sql;
	endif;	

}


############# 以降はメインとなるメソッド ###########################################################


/////////////////////////////////////////////////////////////////////////////////
//	select文のSQL文を発行したい時に使用するメソッド
//
//		fetch("SQL文");
//
//		●使用例：		
//		$dbh = new sqliteOpe(DB_FILEPATH,CREATE_SQL);
//		$array_result = $dbh->fetch($sql);		
//		for($i=0;$i<count($array_result);$i++){
//			foreach($array_result[$i] as $k=>$e){
//				echo "KEY：{$k} ／ VALUE：{$e}<br>\n";
//			}
//			echo "<hr>";
//		}
//		echo "件数：{$i}件";
//
/////////////////////////////////////////////////////////////////////////////////
function fetch($sql){

	// 引数チェック
	if(empty($sql))die("未設定の引数があるため、強制終了しました。<br>\n(ErrorNo:6)<br>\n");	

	#------------------------------------------------------------------
	# 処理実行
	#------------------------------------------------------------------
	if($dbh = sqlite_open($this->filepath,0666,$sqlite_error_message)){
	
		$result = sqlite_query($dbh,$sql);
		if(!$result){
			die("クエリー実行に失敗しました(ErrorNo:7)<br>\n".sqlite_error_string(sqlite_last_error($dbh))."<br>\n");
		}

		// 結果を多次元配列で取得
		$fetch_result = sqlite_fetch_all($result);
		sqlite_close($dbh);

		// バックスラッシュ削除フラグがある場合の処理
		if($this->escape_flg){
			for($i=0;$i<count($fetch_result);$i++){
				foreach($fetch_result[$i] as $e){
					$e = stripslashes($e);
				}
			}
		}

		#------------------------------------------------------------------
		# 取得した多次元配列を返す
		#------------------------------------------------------------------
		return $fetch_result;

	}		
	else{
	  die("DB接続に失敗しました<br>\n(ErrorNo:8)<br>\n".$sqlite_error_message."<br>\n");
	}

}

/////////////////////////////////////////////////////////////////////////////////////////////////
//	select文以外のSQL文を発行したい時に使用するメソッド
//
//		regist("単一 or 配列のSQL文");
//
//		●使用例：		
//		$dbh = new sqliteOpe(DB_FILEPATH,CREATE_SQL);
//		$result = $dbh->regist($sql[0]);
//		
//		エラーメッセージがあれば$resultにエラーメッセージが格納（結果失敗時）
//		$result = ($result)?"DB登録失敗<br>".$result:"DBへデータを登録しました";
//		echo $result;
//
/////////////////////////////////////////////////////////////////////////////////////////////////
function regist($sql){

	// 初期化しておく変数（“エラーメッセージ”と“SQL文格納の配列”）をセット
	$error_mes = false;
	$array_sql = array();

	// 引数チェック	
	if(empty($sql)):
		die("未設定の引数があるため、強制終了しました。<br>\n(ErrorNo:9)<br>\n");
	else:

		// 引数のSQLを配列になるように設定しなおす
		if(is_array($sql)):
			$array_sql = $sql;
		else:
			$array_sql[0] = $sql;
		endif;

	endif;

	#------------------------------------------------------------------
	# 処理実行 
	#	※SQL文が格納されている配列の件数分SQLを実行
	#	※トランザクション処理を行う（高速処理のため）
	#	※エラーがあればメッセージ格納
	#------------------------------------------------------------------
	if($dbh = sqlite_open($this->filepath,0666,$sqlite_error_message)){

		sqlite_query($dbh,"BEGIN TRANSACTION");
		foreach($array_sql as $k => $e){

			if(!sqlite_query($dbh,$e)){
				$error_mes .= "クエリー実行時にエラーが発生しました<br>\nErrorNo:10（SQLの{$k}番目）。<br>\n".sqlite_error_string(sqlite_last_error($dbh))."<br>\n";
			}
	
		}
		sqlite_query($dbh,"END TRANSACTION");

		#------------------------------------------------------------------
		# 接続を閉じてエラーがあれば戻り値として戻す
		#------------------------------------------------------------------
		sqlite_close($dbh);
		if($error_mes)return $error_mes;

	}
	else{
	  die("DB接続に失敗しました<br>\n(ErrorNo:11)<br>\n".$sqlite_error_message."<br>\n");
	}

}


}/* クラス“sqliteOpe”の終了 */
?>